(Authentication)
(1)
(Flow)
(App.jsx)
import {Navigate, Route, Routes} from "react-router-dom";
import HomePage from "./pages/HomePage.jsx";
import LoginPage from "./pages/LoginPage.jsx";
import SignUpPage from "./pages/SignUpPage.jsx";
import TransactionPage from "./pages/TransactionPage.jsx"
import NotFoundPage from "./pages/NotFoundPage.jsx"
import Header from "./components/ui/Header.jsx";
import { useQuery } from "@apollo/client";
import { GET_AUTHENTICATED_USER } from "./graphql/queries/user.query.js";
import { Toaster } from 'react-hot-toast';

function App() {
  const {data, error, loading} = useQuery(GET_AUTHENTICATED_USER);

  console.log("Auth:", data);
  console.log("Error:", error);
  console.log("Loading:", loading);

  if (loading) return null;

  return (
    <>
    {data?.authUser && <Header />}
      <Routes>
        <Route path='/' element={data.authUser ? <HomePage /> : <Navigate to='/login' />} />
				<Route path='/login' element={!data.authUser ? <LoginPage /> : <Navigate to='/' />} />
				<Route path='/signup' element={!data.authUser ? <SignUpPage /> : <Navigate to='/' />} />
				<Route
					path='/transaction/:id'
					element={data.authUser ? <TransactionPage /> : <Navigate to='/login' />}
				/>
				<Route path='*' element={<NotFoundPage />} />
      </Routes>
      <Toaster/>
    </>
  )
}

export default App

--------------------------------------------------------------------------------------------------------------------------------------------------
(2)
(user.mutation.js)
import { gql } from '@apollo/client';

// SIGNUP
export const SIGN_UP = gql`
  mutation SignUp ($input: SignUpInput!) {
    signUp (input: $input) {
      _id
      name
      username
    }
  }
`;

// LOGIN
export const LOGIN = gql`
	mutation Login($input: LoginInput!) {
		login(input: $input) {
			_id
			name
			username
		}
	}
`;

// LOGOUT
export const LOGOUT = gql`
	mutation Logout {
		logout {
			message
		}
	}
`;

--------------------------------------------------------------------------------------------------------------------------------------------------
(3)



