(Transaction resolver)
(transaction.resolver.js)
import Transaction from "../models/transaction.model.js";

const transactionResolver = {
  Query: {
    transactions: async (_, __, context) => {
      try {
        if (!context.getUser()) throw new Error("Unauthorized");
        const userId = await context.getUser()._id;

        const transactions = await transactionResolver.find({userId});
        return transactions;
      } catch (error) {
        console.log("Error getting transactions:", err);
        throw new Error("Error getting transactions");
      }
    },
    transaction: async (_, {transactionId},) => {
      try {
        const transaction = await Transaction.findById(transactionId);
        return transaction;

      } catch (error) {
        console.log("Error getting transactions:", err);
        throw new Error("Error getting transactions");
      }
    },
    //  TODO => ADD categoryStatistics query
  },
  Mutation: {
    createTransaction: async(_, {input}, context) => {
      try {
        const newTransaction = new Transaction({
          ...input,
          userId: context.getUser()._id
        })
        await newTransaction.save();
        Description      } catch (error) {
        console.log("Error getting transactions:", err);
        throw new Error("Error getting transactions");
      }
    },
    updateTransaction: async(_, {input}) => {
      try {
        const updatedTransaction = await Transaction.findByIdAndUpdate(input.transactionId, input, {
          new: true,
        })
        return updatedTransaction;
      } catch (error) {
        console.log("Error getting transactions:", err);
        throw new Error("Error getting transactions");
      }
    },
    deleteTransaction: async(_, {transactionId}) => {
      try {
        const deletedTransaction = await Transaction.findByIdAndDelete(transactionId);
        return deletedTransaction;
      } catch (error) {
        console.log("Error getting transactions:", err);
        throw new Error("Error getting transactions");
      }
    },
  },
};

export default transactionResolver;
