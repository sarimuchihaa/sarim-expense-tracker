(Schema)
(1)
(Data)
npm init -y
npm install express express-session graphql @apollo/server @graphql-tools/merge bcryptjs connect-mongodb-session dotenv graphql-passport passport mongoose
npm install @apollo/server graphql
npm install nodemon --save-dev

(data.js)
// Hardcoded array of 5 users
const users = [
	{
		_id: "1",
		username: "user1",
		name: "User One",
		password: "password1",
		profilePicture: "profile1.jpg",
		gender: "male",
	},
	{
		_id: "2",
		username: "user2",
		name: "User Two",
		password: "password2",
		profilePicture: "profile2.jpg",
		gender: "female",
	},
	{
		_id: "3",
		username: "user3",
		name: "User Three",
		password: "password3",
		profilePicture: "profile3.jpg",
		gender: "male",
	},
	{
		_id: "4",
		username: "user4",
		name: "User Four",
		password: "password4",
		profilePicture: "profile4.jpg",
		gender: "female",
	},
	{
		_id: "5",
		username: "user5",
		name: "User Five",
		password: "password5",
		profilePicture: "profile5.jpg",
		gender: "male",
	},
];

// Hardcoded array of 5 transactions
const transactions = [
	{
		_id: "1",
		userId: "1",
		description: "Transaction One",
		paymentType: "CASH",
		category: "Category One",
		amount: 100.0,
		location: "Location One",
		date: "2024-01-01",
	},
	{
		_id: "2",
		userId: "2",
		description: "Transaction Two",
		paymentType: "CARD",
		category: "Category Two",
		amount: 200.0,
		location: "Location Two",
		date: "2024-01-02",
	},
	{
		_id: "3",
		userId: "3",
		description: "Transaction Three",
		paymentType: "CASH",
		category: "Category Three",
		amount: 300.0,
		location: "Location Three",
		date: "2024-01-03",
	},
	{
		_id: "4",
		userId: "4",
		description: "Transaction Four",
		paymentType: "CARD",
		category: "Category Four",
		amount: 400.0,
		location: "Location Four",
		date: "2024-01-04",
	},
	{
		_id: "5",
		userId: "5",
		description: "Transaction Five",
		paymentType: "CASH",
		category: "Category Five",
		amount: 500.0,
		location: "Location Five",
		date: "2024-01-05",
	},
];

// Export the arrays
export { users, transactions };



(2)
(Resolvers)
(index.js)
import { mergeResolvers } from "@graphql-tools/merge";

import userResolver from './user.resolver.js';
import transactionResolver from './transaction.resolver.js';

const mergedResolvers = mergeResolvers([userResolver, transactionResolver]);

export default mergedResolvers;

(transaction.resolver.js)
const transactionResolver = {
  Query: {},
  Mutation: {},
};

export default transactionResolver;

(user.resolver.js)
import {users} from '../dummyData/data.js';

const userResolver = {
    Query: {
     users: () => {
       return users
     }
    },
    Mutation: {}
}

export default userResolver;



(3)
(typeDefs)
(index.js)
import { mergeTypeDefs } from "@graphql-tools/merge";

// typeDefs
import userTypeDef from "./user.typeDef.js";
import transactionTypeDef from "./transaction.typeDef.js";

const mergedTypeDefs = mergeTypeDefs([userTypeDef, transactionTypeDef]);

export default mergedTypeDefs;

(transaction.typeDefs.js)
const transactionTypeDef = `#graphql
  type Transaction {
    _id: ID!
    userId: ID!
    description: String!
    paymentType: String!
    category: String!
    amount: Float!
    location: String
    date: String!
  }

  type Query {
    transactions: [Transaction!]
    transaction(transactionId:ID!): Transaction
  }

  type Mutation {
    createTransaction(input: CreateTransactionInput!): Transaction!
    updateTransaction(input: UpdateTransactionInput!): Transaction!
    deleteTransaction(transactionId:ID!): Transaction!
  }

  input CreateTransactionInput {
    description: String!
    paymentType: String!
    category: String!
    amount: Float!
    date: String!
    location: String
  }

  input UpdateTransactionInput {
    transactionId: ID!
    description: String
    paymentType: String
    category: String
    amount: Float
    location: String
    date: String
  }
`;

export default transactionTypeDef;

(user.typeDef.js)
const userTypeDef = `#graphql
  type User {
    _id: ID!
    username: String!
    name: String!
    password: String!
    profilePicture: String
    gender: String!
  }

  type Query {
    users: [User!]
    authUser: User
    user(userID: ID!): User
  }

  type Mutation {
    signUp(input: SignUpInput!): User
    login(input: LoginInput!): User
    logout: LogoutResponse
  }

  input SignUpInput {
    username: String!
    name: String!
    password: String!
    gender: String!
  }

  input LoginInput {
    username: String!
    password: String!
  }

  type LogoutResponse {
    message: String!
  }
`;

export default userTypeDef;
