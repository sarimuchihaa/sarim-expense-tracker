(Crud transactions)
(1)
(transaction.mutation.js)
import { gql } from "@apollo/client";

// CREATE
export const CREATE_TRANSACTION = gql`
	mutation CreateTransaction($input: CreateTransactionInput!) {
		createTransaction(input: $input) {
			_id
			description
			paymentType
			category
			amount
			location
			date
		}
	}
`;

// UPDATE
export const UPDATE_TRANSACTION = gql`
	mutation UpdateTransaction($input: UpdateTransactionInput!) {
		updateTransaction(input: $input) {
			_id
			description
			paymentType
			category
			amount
			location
			date
		}
	}
`;

// DELETE
export const DELETE_TRANSACTION = gql`
	mutation DeleteTransaction($transactionId: ID!) {
		deleteTransaction(transactionId: $transactionId) {
			_id
			description
			paymentType
			category
			amount
			location
			date
		}
	}
`;

--------------------------------------------------------------------------------------------------------------------------------------------------
(2)
(Create)
(TransactionForm.jsx)
import { useMutation } from "@apollo/client";
import { CREATE_TRANSACTION } from "../../graphql/mutations/transaction.mutation.js";
import toast from 'react-hot-toast';

const TransactionForm = () => {
  const [createTransaction, { loading }] = useMutation(CREATE_TRANSACTION);

  const handleSubmit = async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);
    const transactionData = {
      description: formData.get("description"),
      paymentType: formData.get("paymentType"),
      category: formData.get("category"),
      amount: parseFloat(formData.get("amount")),
      location: formData.get("location"),
      date: formData.get("date"),
    };
    console.log("transactionData", transactionData);

    try {
		await createTransaction({ variables: { input: transactionData } });

		form.reset();
		toast.success("Transaction created successfully.");
	} catch (error) {
		toast.success("Transaction created successfully.");
	}
};

  return (
    <form className="w-full max-w-lg flex flex-col gap-5 px-3" onSubmit={handleSubmit}>
      {/* TRANSACTION */}
      <div className="flex flex-wrap">
        <div className="w-full">
          <label
            className="block uppercase tracking-wide text-white text-xs font-bold mb-2"
            htmlFor="description"
          >
            Transaction
          </label>
          <input
            className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
            id="description"
            name="description"
            type="text"
            required
            placeholder="Rent, Groceries, Salary, etc."
          />
        </div>
      </div>
      {/* PAYMENT TYPE */}
      <div className="flex flex-wrap gap-3">
        <div className="w-full flex-1 mb-6 md:mb-0">
          <label
            className="block uppercase tracking-wide text-white text-xs font-bold mb-2"
            htmlFor="paymentType"
          >
            Payment Type
          </label>
          <div className="relative">
            <select
              className="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
              id="paymentType"
              name="paymentType"
            >
              <option value={"card"}>Card</option>
              <option value={"cash"}>Cash</option>
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
              <svg
                className="fill-current h-4 w-4"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
              >
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
              </svg>
            </div>
          </div>
        </div>

        {/* CATEGORY */}
        <div className="w-full flex-1 mb-6 md:mb-0">
          <label
            className="block uppercase tracking-wide text-white text-xs font-bold mb-2"
            htmlFor="category"
          >
            Category
          </label>
          <div className="relative">
            <select
              className="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
              id="category"
              name="category"
            >
              <option value={"saving"}>Saving</option>
              <option value={"expense"}>Expense</option>
              <option value={"investment"}>Investment</option>
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
              <svg
                className="fill-current h-4 w-4"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
              >
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
              </svg>
            </div>
          </div>
        </div>

        {/* AMOUNT */}
        <div className="w-full flex-1 mb-6 md:mb-0">
          <label className="block uppercase text-white text-xs font-bold mb-2" htmlFor="amount">
            Amount($)
          </label>
          <input
            className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
            id="amount"
            name="amount"
            type="number"
            placeholder="150"
          />
        </div>
      </div>

      {/* LOCATION */}
      <div className="flex flex-wrap gap-3">
        <div className="w-full flex-1 mb-6 md:mb-0">
          <label
            className="block uppercase tracking-wide text-white text-xs font-bold mb-2"
            htmlFor="location"
          >
            Location
          </label>
          <input
            className="appearance-none block w-full bg-gray-200 text-gray-700 border  rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white"
            id="location"
            name="location"
            type="text"
            placeholder="New York"
          />
        </div>

        {/* DATE */}
        <div className="w-full flex-1">
          <label className="block uppercase tracking-wide text-white text-xs font-bold mb-2" htmlFor="date">
            Date
          </label>
          <input
            type="date"
            name="date"
            id="date"
            className="appearance-none block w-full bg-gray-200 text-gray-700 border  rounded py-[11px] px-4 mb-3 leading-tight focus:outline-none
             focus:bg-white"
            placeholder="Select date"
          />
        </div>
      </div>
      {/* SUBMIT BUTTON */}
      <button
        className="text-white font-bold w-full rounded px-4 py-2 bg-gradient-to-br
          from-pink-500 to-pink-500 hover:from-pink-600 hover:to-pink-600
          disabled:opacity-70 disabled:cursor-not-allowed"
        type="submit"
        disabled={loading}
      >
        {loading ? "Loading..." : "Add Transaction"}
      </button>
    </form>
  );
};

export default TransactionForm;


(Data)
Transaction: Salary
Payment Type: Card
Category: Saving
Amount: 150
Location: Jhang
Date: 30 August 2024

--------------------------------------------------------------------------------------------------------------------------------------------------
(3)
(Delete)
(Card.jsx)
import { FaLocationDot } from "react-icons/fa6";
import { BsCardText } from "react-icons/bs";
import { MdOutlinePayments } from "react-icons/md";
import { FaSackDollar } from "react-icons/fa6";
import { FaTrash } from "react-icons/fa";
import { HiPencilAlt } from "react-icons/hi";
import { Link } from "react-router-dom";
import { formatDate } from "../utils/formatDate";
import toast from 'react-hot-toast';
import { useMutation } from "@apollo/client";
import { DELETE_TRANSACTION } from "../graphql/mutations/transaction.mutation.js";

const categoryColorMap = {
	saving: "from-green-700 to-green-400",
	expense: "from-pink-800 to-pink-600",
	investment: "from-blue-700 to-blue-400",
	// Add more categories and corresponding color classes as needed
};

const Card = ({ transaction }) => {
	let { description, paymentType,  amount, location, category, date } = transaction;
	const cardClass = categoryColorMap[category];
	const [deleteTransaction, {loading} ] = useMutation(DELETE_TRANSACTION,{
		refetchQueries:["GetTransactions"]
	})

	// Capitalize first letter of description.
	description = description[0]?.toUpperCase() + description.slice(1);
	category = category[0]?.toUpperCase() + category.slice(1);
	paymentType = paymentType[0]?.toUpperCase() + paymentType.slice(1);
	const formattedDate = formatDate(date);


	// handleDelete event.
	const handleDelete = async () => {
		try {
			await deleteTransaction({ variables: { transactionId: transaction._id } });
			toast.success("Transaction deleted successfully");
		} catch (error) {
			console.error("Error deleting transaction:", error);
			toast.error(error.message);
		}
	};


	return (
		<div className={`rounded-md p-4 bg-gradient-to-br ${cardClass}`}>
			<div className='flex flex-col gap-3'>
				<div className='flex flex-row items-center justify-between'>
					<h2 className='text-lg font-bold text-white'>Saving</h2>
					<div className='flex items-center gap-2'>
					  {!loading && <FaTrash className={"cursor-pointer"} onClick={handleDelete}/>}
						{loading && <div className='w-6 h-6 border-t-2 border-b-2  rounded-full animate-spin'></div>}
						<Link to={`/transaction/123`}>
							<HiPencilAlt className='cursor-pointer' size={20} />
						</Link>
					</div>
				</div>
				<p className='text-white flex items-center gap-1'>
					<BsCardText />
					Description: {description}
				</p>
				<p className='text-white flex items-center gap-1'>
					<MdOutlinePayments />
					Payment Type: {paymentType}
				</p>
				<p className='text-white flex items-center gap-1'>
					<FaSackDollar />
					Amount: ${amount}
				</p>
				<p className='text-white flex items-center gap-1'>
					<FaLocationDot />
					Location: {location || "N/A"}
				</p>
				<div className='flex justify-between items-center'>
					<p className='text-xs text-black font-bold'>{formattedDate}</p>
					<img
						src={"https://tecdn.b-cdn.net/img/new/avatars/2.webp"}
						className='h-8 w-8 border rounded-full'
						alt=''
					/>
				</div>
			</div>
		</div>
	);
};
export default Card;

--------------------------------------------------------------------------------------------------------------------------------------------------
(4)
(Update)
(TransactionPage.jsx)
// TransactionPage.jsx
import { useMutation, useQuery } from "@apollo/client";
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { GET_TRANSACTION, GET_TRANSACTION_STATISTICS } from "../graphql/queries/transaction.query";
import { UPDATE_TRANSACTION } from "../graphql/mutations/transaction.mutation";
import toast from "react-hot-toast";
// import TransactionFormSkeleton from "../components/skeletons/TransactionFormSkeleton";

const TransactionPage = () => {
	const { id } = useParams();
	const { loading, data } = useQuery(GET_TRANSACTION, {
		variables: { id: id },
	});
	console.log("Transaction data", data);

	const [updateTransaction, { loading: loadingUpdate }] = useMutation(UPDATE_TRANSACTION, {
		refetchQueries: [{ query: GET_TRANSACTION_STATISTICS }],
	});

	const [formData, setFormData] = useState({
		description: data?.transaction?.description || "",
		paymentType: data?.transaction?.paymentType || "",
		category: data?.transaction?.category || "",
		amount: data?.transaction?.amount || "",
		location: data?.transaction?.location || "",
		date: data?.transaction?.date || "",
	});

	const handleSubmit = async (e) => {
		e.preventDefault();
		const amount = parseFloat(formData.amount);
		try {
			await updateTransaction({
				variables: {
					input: {
						...formData,
						amount,
						transactionId: id,
					},
				},
			});
			toast.success("Transaction updated successfully");
		} catch (error) {
			toast.error(error.message);
		}
	};

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };


  useEffect(() => {
	if (data) {
		setFormData({
			description: data?.transaction?.description,
			paymentType: data?.transaction?.paymentType,
			category: data?.transaction?.category,
			amount: data?.transaction?.amount,
			location: data?.transaction?.location,
			date: new Date(+data.transaction.date).toISOString().substr(0, 10),
		});
	}
}, [data]);

// if (loading) return <TransactionFormSkeleton />;

  return (
    <div className='h-screen max-w-4xl mx-auto flex flex-col items-center'>
      <p className='md:text-4xl text-2xl lg:text-4xl font-bold text-center relative z-50 mb-4 mr-4 bg-gradient-to-r from-pink-600 via-indigo-500 to-pink-400 inline-block text-transparent bg-clip-text'>
        Update this transaction
      </p>
      <form className='w-full max-w-lg flex flex-col gap-5 px-3 ' onSubmit={handleSubmit}>
        {/* TRANSACTION */}
        <div className='flex flex-wrap'>
          <div className='w-full'>
            <label className='block uppercase tracking-wide text-white text-xs font-bold mb-2' htmlFor='description'>
              Transaction
            </label>
            <input
              className='appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500'
              id='description'
              name='description'
              type='text'
              placeholder='Rent, Groceries, Salary, etc.'
              value={formData.description}
              onChange={handleInputChange}
            />
          </div>
        </div>

        {/* PAYMENT TYPE */}
        <div className='flex flex-wrap gap-3'>
          <div className='w-full flex-1 mb-6 md:mb-0'>
            <label className='block uppercase tracking-wide text-white text-xs font-bold mb-2' htmlFor='paymentType'>
              Payment Type
            </label>
            <div className='relative'>
              <select
                className='block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500'
                id='paymentType'
                name='paymentType'
                onChange={handleInputChange}
                value={formData.paymentType}
              >
                <option value='card'>Card</option>
                <option value='cash'>Cash</option>
              </select>
              <div className='pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700'>
                <svg className='fill-current h-4 w-4' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'>
                  <path d='M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z' />
                </svg>
              </div>
            </div>
          </div>

          {/* CATEGORY */}
          <div className='w-full flex-1 mb-6 md:mb-0'>
            <label className='block uppercase tracking-wide text-white text-xs font-bold mb-2' htmlFor='category'>
              Category
            </label>
            <div className='relative'>
              <select
                className='block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500'
                id='category'
                name='category'
                onChange={handleInputChange}
                value={formData.category}
              >
                <option value='saving'>Saving</option>
                <option value='expense'>Expense</option>
                <option value='investment'>Investment</option>
              </select>
              <div className='pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700'>
                <svg className='fill-current h-4 w-4' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'>
                  <path d='M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z' />
                </svg>
              </div>
            </div>
          </div>

          {/* AMOUNT */}
          <div className='w-full flex-1 mb-6 md:mb-0'>
            <label className='block uppercase text-white text-xs font-bold mb-2' htmlFor='amount'>
              Amount($)
            </label>
            <input
              className='appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500'
              id='amount'
              name='amount'
              type='number'
              placeholder='150'
              value={formData.amount}
              onChange={handleInputChange}
            />
          </div>
        </div>

        {/* LOCATION */}
        <div className='flex flex-wrap gap-3'>
          <div className='w-full flex-1 mb-6 md:mb-0'>
            <label className='block uppercase tracking-wide text-white text-xs font-bold mb-2' htmlFor='location'>
              Location
            </label>
            <input
              className='appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white'
              id='location'
              name='location'
              type='text'
              placeholder='New York'
              value={formData.location}
              onChange={handleInputChange}
            />
          </div>

          {/* DATE */}
          <div className='w-full flex-1'>
            <label className='block uppercase tracking-wide text-white text-xs font-bold mb-2' htmlFor='date'>
              Date
            </label>
            <input
              type='date'
              name='date'
              id='date'
              className='appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-[11px] px-4 mb-3 leading-tight focus:outline-none focus:bg-white'
              placeholder='Select date'
              value={formData.date}
              onChange={handleInputChange}
            />
          </div>
        </div>

        {/* SUBMIT BUTTON */}
        <button
          className='text-white font-bold w-full rounded px-4 py-2 bg-gradient-to-br from-pink-500 to-pink-500 hover:from-pink-600 hover:to-pink-600'
          type='submit'
		  disabled={loadingUpdate}
        >
          {loadingUpdate ? "Updating..." : "Update Transaction"}
        </button>
      </form>
    </div>
  );
};

export default TransactionPage;

--------------------------------------------------------------------------------------------------------------------------------------------------
